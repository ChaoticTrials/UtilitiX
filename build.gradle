import org.w3c.dom.Document
import org.w3c.dom.NodeList

import javax.xml.parsers.DocumentBuilderFactory

buildscript {
    apply from: 'https://moddingx.github.io/ModUtils/v5/buildscript.gradle', to: buildscript
}

apply from: 'https://moddingx.github.io/ModUtils/v5/mod.gradle'
apply plugin: 'org.moddingx.modgradle.coremods'
apply plugin: 'org.moddingx.modgradle.cursedep'

apply plugin: 'maven-publish'
mod['version'] = getVersion(mod.minecraft + "-" + mod.base_version, new URL(mod.remote_maven + "/" + group.replace('.', '/') + "/" + name + "/maven-metadata.xml"))
project.version = mod.version

println "Java: ${System.getProperty('java.version')}   JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')})   Arch: ${System.getProperty('os.arch')}"
println "Mod: ${project.name}(${mod.modid})   Group: ${project.group}   Version: ${project.version}"
println "Minecraft: ${mod.minecraft}   Target: java${mod.java}" + (mod.mixin ? "   Mixin: ${mod.mixin_version}" : '')
println ''

repositories {
    maven {
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "LibX"
        url = "https://maven.melanx.de/"
    }
    maven {
        name = "ModdingX"
        url = 'https://maven.moddingx.org/'
    }
    maven {
        name = "Curios"
        url = "https://maven.theillusivec4.top/"
    }

    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    annotationProcessor fg.deobf("org.moddingx:LibX:1.20.1-5.0.1")

    implementation fg.deobf("org.moddingx:LibX:1.20.1-5.0.1")
    implementation fg.deobf("mezz.jei:jei-1.20.1-forge:15.0.0.12")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:5.9.1+1.20.1")
    implementation curse.mod(324717, 4681833) // Jade 1.20-forge-11.4.3

//    runtimeOnly fg.deobf("de.melanx:RecipePrinter:1.18.2-3.2.0")

    coremods 'org.moddingx:CoreModTypes:5.0.2-2'

    // for testing
    compileOnly fg.deobf("org.violetmoon.quark:Quark:4.0-beta-432.3267")
    compileOnly fg.deobf("org.violetmoon.zeta:Zeta:1.0-11.48")
    runtimeOnly curse.mod(443900, 4916633) // Pipez 1.20.1-1.2.5
    runtimeOnly curse.mod(254241, 5131447) // mob_grinding_utils-1.20.1-1.1.0
    compileOnly curse.mod(400085, 4509436) // Upgraded Netherite - 1.19.4-5.3.0.1
    compileOnly curse.mod(566700, 4509434) // Upgraded Core - 1.19.4-4.3.0.1
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = project.group
            artifactId = project.name
            version = project.version
            artifact(jar) {
                builtBy project.provider { project.tasks.named('reobfJar') }
            }
            if (mod.sources) {
                artifact(sourceJar)
            }
            pom {
                licenses {
                    license {
                        name = mod.license
                        url = mod.license_url.toString()
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url mod.remote_maven
            credentials(PasswordCredentials)
        }
    }
}
publish.dependsOn('reobfJar')


private static String getVersion(String baseVersion, URL url) {
    try {
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(connection.getInputStream());
        NodeList versionNodes = doc.getElementsByTagName("version");

        String latestVersion = null;
        for (int i = 0; i < versionNodes.getLength(); i++) {
            String version = versionNodes.item(i).getTextContent();
            if (version.startsWith(baseVersion)) {
                latestVersion = version;
            }
        }

        if (latestVersion == null) {
            return baseVersion + ".0";
        }

        return baseVersion + "." + (Integer.parseInt(latestVersion.substring(latestVersion.lastIndexOf('.') + 1)) + 1);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}
